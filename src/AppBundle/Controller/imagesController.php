<?php

namespace AppBundle\Controller;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;

use AppBundle\Entity\Images;// подключаем entity 

class imagesController extends Controller
{
    /**
     * @Route("/upload/", name="upload")
     */
    public function uploadAction(Request $request)
    {
        
        $image = new Images();
		$form = $this->createFormBuilder($image)
				->add('image', FileType::class)
				->add('save', SubmitType::class)
				->getForm();
		
		$form->handleRequest($request);// сделать request на создание формы
		
		if( $form->isSubmitted() && $form->isValid() ){
			// $file stores the uploaded PDF file
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file = $image->getImage();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
			
			// moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('images_directory'),
                $fileName
            );
			
			// updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $image->setImage($fileName);
			
			$em = $this->getDoctrine()->getManager();
			$em->persist($image);
			$em->flush();
			
			// ... persist the $product variable or any other work
            // return $this->redirect($this->generateUrl('post'));
            return $this->redirectToRoute('post');
		}
		
		return $this->render(
			'pages/image_form.html.twig', 
			[
				'form' => $form->createView(),
			]
		);
    }
	private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
	
	/**
    * @Route("/image/{id}/", name="image_page")
    */
	public function showImageAction(Request $request, $id){
		$image = $this->getDoctrine()
				->getRepository(Images::class)
				->findOneBy(
					[
						'id' => $id
					]
				);
		
		return $this->render(
			'pages/image_page.html.twig', 
			[
				//'form' => $form->createView(),
				'image' => $image
			]
		);
				
	}//END
	
	
}
